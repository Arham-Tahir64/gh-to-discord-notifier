name: Notify Discord on new commits

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:

permissions:
  contents: write

env:
  REPO_OWNER: negarprh
  REPO_NAME: Canadian-Tech-Internships-2026
  BRANCH: main
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Read last seen SHA (if any)
        id: last
        run: |
          if [[ -f last_sha.txt ]]; then
            echo "last=$(cat last_sha.txt)" >> "$GITHUB_OUTPUT"
          else
            echo "last=" >> "$GITHUB_OUTPUT"
          fi

      - name: Get latest commit via GitHub API
        id: latest
        uses: actions/github-script@v7
        with:
          script: |
            const owner = process.env.REPO_OWNER;
            const repo  = process.env.REPO_NAME;
            const sha   = process.env.BRANCH;
            const { data } = await github.request('GET /repos/{owner}/{repo}/commits', {
              owner, repo, sha, per_page: 1
            });
            if (!data || !data.length) core.setFailed('No commits returned');
            const c = data[0];
            core.setOutput('sha',    c.sha);
            core.setOutput('url',    c.html_url);
            core.setOutput('title',  c.commit.message);
            core.setOutput('author', c.commit.author?.name || c.author?.login || 'unknown');
            core.setOutput('date',   c.commit.author?.date || '');

      - name: Detect if README changed (skip if first run)
        id: change
        uses: actions/github-script@v7
        env:
          LAST: ${{ steps.last.outputs.last }}
          NEW:  ${{ steps.latest.outputs.sha }}
        with:
          script: |
            const owner = process.env.REPO_OWNER;
            const repo  = process.env.REPO_NAME;
            const base  = process.env.LAST;
            const head  = process.env.NEW;

            // First run (no base) -> treat as "changed" so you get one message
            if (!base) { core.setOutput('readme_changed', 'true'); return; }

            const { data } = await github.request('GET /repos/{owner}/{repo}/compare/{base}...{head}', {
              owner, repo, base, head
            });

            const changed = (data.files || []).some(f => f.filename.toLowerCase() === 'readme.md');
            core.setOutput('readme_changed', changed ? 'true' : 'false');

      - name: Debug
        run: |
          echo "last:  ${{ steps.last.outputs.last }}"
          echo "new:   ${{ steps.latest.outputs.sha }}"
          echo "readme_changed: ${{ steps.change.outputs.readme_changed }}"

      - name: Post to Discord
        if: steps.last.outputs.last != steps.latest.outputs.sha && steps.change.outputs.readme_changed == 'true'
        run: |
          payload=$(cat <<JSON
          {
            "content": "**New update in ${REPO_OWNER}/${REPO_NAME}**",
            "embeds": [{
              "title": "${{ steps.latest.outputs.title }}",
              "url":   "${{ steps.latest.outputs.url }}",
              "description": "Author: ${{ steps.latest.outputs.author }}\nDate: ${{ steps.latest.outputs.date }}",
              "footer": {"text": "Branch: ${BRANCH}"}
            }]
          }
          JSON
          )
          curl -sS -H "Content-Type: application/json" -d "$payload" "$DISCORD_WEBHOOK"

      - name: Persist last seen SHA
        if: steps.last.outputs.last != steps.latest.outputs.sha
        run: |
          echo "${{ steps.latest.outputs.sha }}" > last_sha.txt
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add last_sha.txt
          git commit -m "chore: update last seen sha"
          git push
